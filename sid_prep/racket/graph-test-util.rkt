#lang racket

(require "graph.rkt")

(define (generate-graph [type 'unconnected])
  (let ([g (new graph%)])
    (cond [(equal? type 'empty)
           (void)]
          [(equal? type 'unconnected)
           (let-values ([(n₁ n₂ n₃)
                         (values (send g add-node 1)
                                 (send g add-node 2)
                                 (send g add-node 3))])
             (void))]
          [(equal? type 'linear)
           (let-values ([(n₁ n₂ n₃)
                         (values (send g add-node 1)
                                 (send g add-node 2)
                                 (send g add-node 3))])
             (begin (send g add-edge n₁ n₂)
                    (send g add-edge n₂ n₃)))]
          [(equal? type 'tree)
           (let-values ([(n₁ n₂ n₃ n₄ n₅ n₆ n₇)
                         (values (send g add-node 1)
                                 (send g add-node 2)
                                 (send g add-node 3)
                                 (send g add-node 4)
                                 (send g add-node 5)
                                 (send g add-node 6)
                                 (send g add-node 7))])
             (begin (send g add-edge n₁ n₂)
                    (send g add-edge n₁ n₃)
                    (send g add-edge n₂ n₄)
                    (send g add-edge n₂ n₅)
                    (send g add-edge n₃ n₆)
                    (send g add-edge n₃ n₇)))]
          [(equal? type 'components)
           (let-values ([(n₁ n₂ n₃ n₄ n₅ n₆)
                         (values (send g add-node 1)
                                 (send g add-node 2)
                                 (send g add-node 3)
                                 (send g add-node 4)
                                 (send g add-node 5)
                                 (send g add-node 6))])
             (begin (send g add-edge n₁ n₂)
                    (send g add-edge n₁ n₃)
                    (send g add-edge n₂ n₃)
                    (send g add-edge n₄ n₅)
                    (send g add-edge n₅ n₆)))]
          [(equal? type 'dag)
           (let-values ([(n₁ n₂ n₃ n₄ n₅ n₆ n₇ n₈ n₉ n₁₀)
                         (values (send g add-node 1)
                                 (send g add-node 2)
                                 (send g add-node 3)
                                 (send g add-node 4)
                                 (send g add-node 5)
                                 (send g add-node 6)
                                 (send g add-node 7)
                                 (send g add-node 8)
                                 (send g add-node 9)
                                 (send g add-node 10))])
             (begin (send g add-edge n₁ n₂)
                    (send g add-edge n₁ n₃)
                    (send g add-edge n₂ n₃)
                    (send g add-edge n₃ n₄)
                    (send g add-edge n₃ n₅)
                    (send g add-edge n₃ n₇)
                    (send g add-edge n₅ n₆)
                    (send g add-edge n₅ n₇)
                    (send g add-edge n₇ n₉)
                    (send g add-edge n₇ n₁₀)
                    (send g add-edge n₈ n₉)
                    (send g add-edge n₉ n₁₀)))]
          [(equal? type 'cyclic)
           (let-values ([(n₁ n₂ n₃)
                         (values (send g add-node 1)
                                 (send g add-node 2)
                                 (send g add-node 3))])
             (begin (send g add-edge n₁ n₂)
                    (send g add-edge n₂ n₃)
                    (send g add-edge n₃ n₁)))]
          [else (error "Unsupported graph type!")])
    g))
